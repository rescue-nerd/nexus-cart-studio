// Firestore Security Rules for NexusCart
// These rules enforce proper multi-tenant access control

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Stores collection - only super admins can create/delete, store owners can update their own
    match /stores/{storeId} {
      allow read: if true; // Public read for subdomain routing
      allow create: if hasRole('super_admin');
      allow update: if hasRole('super_admin') || (hasRole('store_owner') && resource.data.userId == request.auth.uid);
      allow delete: if hasRole('super_admin');
    }
    
    // Products collection - store owners can manage their own products
    match /products/{productId} {
      allow read: if true; // Public read for storefront
      allow create, update, delete: if hasRole('super_admin') || 
        (hasRole('store_owner') && isStoreOwner(resource.data.storeId));
    }
    
    // Orders collection - store owners can manage their store's orders
    match /orders/{orderId} {
      allow read, create: if true; // Customers can create orders
      allow update, delete: if hasRole('super_admin') || 
        (hasRole('store_owner') && isStoreOwner(resource.data.storeId));
    }
    
    // Users collection - users can read/update their own data
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Helper functions
    function hasRole(role) {
      return request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }
    
    function isStoreOwner(storeId) {
      return request.auth != null && 
        get(/databases/$(database)/documents/stores/$(storeId)).data.userId == request.auth.uid;
    }
  }
}
